name: Django CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password123
          POSTGRES_USER: postgres
          POSTGRES_DB: proyecto_ati_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DEBUG: True
      SECRET_KEY: django-insecure-test-key-for-ci-only-123456
      DATABASE_URL: postgres://postgres:password123@localhost:5432/proyecto_ati_db


    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run migrations
      run: |
        python manage.py migrate

    - name: Run tests
      run: |
        python manage.py test

    - name: Run linting (opcional)
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub (opcional)
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t proyecto-ati-django:latest .

    - name: Test Docker container with PostgreSQL
      run: |
        # Crear red para comunicación entre contenedores
        docker network create test-network
        
        # Ejecutar PostgreSQL
        docker run -d --name test-postgres --network test-network \
          -e POSTGRES_DB=proyecto_ati_db \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=password123 \
          postgres:15
        
        # Esperar a que PostgreSQL esté listo
        sleep 10
        
        # Ejecutar aplicación Django
        docker run -d --name test-django --network test-network \
          -p 8000:8000 \
          -e DATABASE_URL=postgresql://postgres:password123@test-postgres:5432/proyecto_ati_db \
          -e DEBUG=1 \
          proyecto-ati-django:latest
        
        # Esperar y probar
        sleep 15
        curl -f http://localhost:8000 || exit 1
        
        # Limpiar
        docker stop test-django test-postgres
        docker rm test-django test-postgres
        docker network rm test-network

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Aquí agregarías los comandos específicos de despliegue